//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use super::game_tags::Relation as GameTagsRelation;
use super::player_games::Relation as PlayerGamesRelation;
use super::players::Entity as PlayersEntity;
use super::tags::Entity as TagsEntity;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "TagsEntity")]
    Tags,
    #[sea_orm(has_many = "PlayersEntity")]
    Players,
}

impl Related<TagsEntity> for Entity {
    fn to() -> RelationDef {
        GameTagsRelation::Tags.def()
    }

    fn via() -> Option<RelationDef> {
        Some(GameTagsRelation::Games.def().rev())
    }
}

impl Related<PlayersEntity> for Entity {
    fn to() -> RelationDef {
        PlayerGamesRelation::Players.def()
    }

    fn via() -> Option<RelationDef> {
        Some(PlayerGamesRelation::Games.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
