//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub optimal_session_length_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_tags::Entity")]
    GameTags,
    #[sea_orm(
        belongs_to = "super::optimal_session_length::Entity",
        from = "Column::OptimalSessionLengthId",
        to = "super::optimal_session_length::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    OptimalSessionLength,
    #[sea_orm(has_many = "super::player_games::Entity")]
    PlayerGames,
    #[sea_orm(has_many = "super::tags::Entity")]
    Tags,
    #[sea_orm(has_many = "super::players::Entity")]
    Players,
}

impl Related<super::game_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameTags.def()
    }
}

impl Related<super::optimal_session_length::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OptimalSessionLength.def()
    }
}

impl Related<super::player_games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerGames.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_tags::Relation::Tags.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::game_tags::Relation::Games.def().rev())
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        super::player_games::Relation::Players.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::player_games::Relation::Games.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
