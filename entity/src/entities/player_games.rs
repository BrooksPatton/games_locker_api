//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "player_games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub game_id: i32,
    pub player_id: i32,
    pub game_state_id: Option<i32>,
    pub goal: Option<String>,
    pub completed: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::game_states::Entity",
        from = "Column::GameStateId",
        to = "super::game_states::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GameStates,
    #[sea_orm(
        belongs_to = "super::games::Entity",
        from = "Column::GameId",
        to = "super::games::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Games,
    #[sea_orm(
        belongs_to = "super::players::Entity",
        from = "Column::PlayerId",
        to = "super::players::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Players,
}

impl Related<super::game_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameStates.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::players::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Players.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
